// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER & ROLE SCHEMA
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  phone     String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role relationships
  userRoles UserRole[]

  // Profile information
  profile UserProfile?

  // Department and Team relationships
  userDepartments UserDepartment[]
  userTeams       UserTeam[]

  // Leadership relationships
  departmentsAsHead Department[] @relation("DepartmentHead")
  teamsAsLead       Team[]       @relation("TeamLead")

  // Chat and Message relationships
  chatMembers       ChatMember[]
  sentMessages      Message[]    @relation("SentMessages")
  messageReactions  MessageReaction[]
  pinnedMessages    PinnedMessage[] @relation("PinnedMessages")

  // Task Management relationships
  taskAssignments   TaskAssignment[]
  taskComments      TaskComment[]
  taskAttachments   TaskAttachment[]
  taskTimeEntries   TaskTimeEntry[]
  taskWatchers      TaskWatcher[]

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?  // For UI display
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userRoles   UserRole[]
  permissions RolePermission[]

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("roles")
}

model UserRole {
  id       String @id @default(cuid())
  userId   String
  roleId   String
  isActive Boolean @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  resource    String   // e.g., "users", "chats", "tasks"
  action      String   // e.g., "create", "read", "update", "delete"
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean @default(true)
  grantedAt    DateTime @default(now())
  grantedBy    String?

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  bio         String?
  timezone    String?   @default("UTC")
  language    String?   @default("en")
  theme       String?   @default("light")
  dateFormat  String?   @default("DD/MM/YYYY")
  timeFormat  String?   @default("24h")
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  desktopNotifications  Boolean @default(true)
  
  // Privacy settings
  profileVisibility     String  @default("public") // public, private, team
  showOnlineStatus      Boolean @default(true)
  showLastSeen          Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ================================
// DEPARTMENT & TEAM SCHEMA
// ================================

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  code        String?  @unique // Department code (e.g., "IT", "HR", "SALES")
  color       String?  // For UI display

  // Hierarchy support
  parentId    String?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")

  // Contact information
  email       String?
  phone       String?
  address     String?

  // Settings
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(true) // Visible to all users

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  // Relationships
  teams           Team[]
  userDepartments UserDepartment[]
  chats           Chat[]
  tasks           Task[]

  // Department head (manager)
  headUserId      String?
  head            User? @relation("DepartmentHead", fields: [headUserId], references: [id])

  @@map("departments")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  displayName String
  description String?
  code        String?  // Team code (e.g., "DEV-FRONTEND", "SALES-NORTH")
  color       String?  // For UI display

  // Department relationship
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  // Team settings
  isActive     Boolean  @default(true)
  isPublic     Boolean  @default(true) // Visible to department members
  maxMembers   Int?     // Maximum team size

  // Team type
  teamType     String   @default("permanent") // permanent, temporary, project

  // Project teams specific fields
  startDate    DateTime?
  endDate      DateTime?

  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  // Relationships
  userTeams    UserTeam[]
  chats        Chat[]
  tasks        Task[]

  // Team lead
  leadUserId   String?
  lead         User? @relation("TeamLead", fields: [leadUserId], references: [id])

  @@unique([departmentId, name])
  @@map("teams")
}

model UserDepartment {
  id           String   @id @default(cuid())
  userId       String
  departmentId String

  // Role in department
  role         String   @default("member") // member, manager, admin
  isActive     Boolean  @default(true)
  isPrimary    Boolean  @default(false) // Primary department for user

  // Assignment details
  assignedAt   DateTime @default(now())
  assignedBy   String?

  // Relationships
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@map("user_departments")
}

model UserTeam {
  id         String   @id @default(cuid())
  userId     String
  teamId     String

  // Role in team
  role       String   @default("member") // member, lead, admin
  isActive   Boolean  @default(true)

  // Assignment details
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team       Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("user_teams")
}

// ================================
// CHAT & MESSAGE SCHEMA
// ================================

model Chat {
  id          String   @id @default(cuid())
  name        String
  description String?

  // Chat type and settings
  type        String   @default("group") // direct, group, department, team, announcement
  isPrivate   Boolean  @default(false)
  isArchived  Boolean  @default(false)

  // Chat metadata
  avatar      String?  // Chat room avatar
  color       String?  // Chat room color

  // Organization relationships
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  teamId       String?
  team         Team?       @relation(fields: [teamId], references: [id])

  // Chat settings
  maxMembers   Int?     // Maximum number of members
  allowGuests  Boolean  @default(false)

  // Message settings
  messageRetentionDays Int? // Auto-delete messages after X days
  allowFileSharing     Boolean @default(true)
  allowReactions       Boolean @default(true)
  allowThreads         Boolean @default(true)

  // Moderation settings
  requireApproval      Boolean @default(false) // Messages need approval
  mutedUntil          DateTime?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastMessageAt DateTime?

  // Audit fields
  createdBy   String?
  updatedBy   String?

  // Relationships
  messages      Message[]
  chatMembers   ChatMember[]
  pinnedMessages PinnedMessage[]

  @@map("chats")
}

model ChatMember {
  id       String   @id @default(cuid())
  chatId   String
  userId   String

  // Member role and status
  role     String   @default("member") // member, admin, moderator
  isActive Boolean  @default(true)
  isMuted  Boolean  @default(false)
  mutedUntil DateTime?

  // Member permissions
  canInvite    Boolean @default(false)
  canKick      Boolean @default(false)
  canPin       Boolean @default(false)
  canModerate  Boolean @default(false)

  // Join/leave tracking
  joinedAt     DateTime @default(now())
  leftAt       DateTime?
  invitedBy    String?

  // Read status
  lastReadAt   DateTime?
  lastReadMessageId String?

  // Notification settings
  notificationsEnabled Boolean @default(true)
  mentionNotifications Boolean @default(true)

  // Relationships
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastReadMessage Message? @relation("LastReadMessage", fields: [lastReadMessageId], references: [id])

  @@unique([chatId, userId])
  @@map("chat_members")
}

model Message {
  id       String   @id @default(cuid())
  chatId   String
  senderId String

  // Message content
  content  String?  // Text content
  type     String   @default("text") // text, image, file, system, announcement

  // Message metadata
  isEdited    Boolean @default(false)
  isDeleted   Boolean @default(false)
  isPinned    Boolean @default(false)

  // Reply/Thread support
  replyToId   String?
  replyTo     Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[] @relation("MessageReplies")
  threadId    String?  // For threaded conversations

  // System message data
  systemData  Json?    // For system messages (user joined, left, etc.)

  // Rich content
  mentions    String[] // Array of mentioned user IDs
  attachments Json?    // File attachments metadata

  // Message status
  deliveredAt DateTime?
  readBy      Json?    // Track who read the message

  // Moderation
  isApproved  Boolean  @default(true)
  approvedBy  String?
  approvedAt  DateTime?
  flaggedBy   String[] // Users who flagged this message
  flagReason  String?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  editedAt    DateTime?
  deletedAt   DateTime?

  // Relationships
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  reactions   MessageReaction[]
  pinnedIn    PinnedMessage[]
  readByMembers ChatMember[] @relation("LastReadMessage")

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String   // Emoji unicode or shortcode
  createdAt DateTime @default(now())

  // Relationships
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model PinnedMessage {
  id        String   @id @default(cuid())
  chatId    String
  messageId String
  pinnedBy  String
  pinnedAt  DateTime @default(now())
  reason    String?  // Why this message was pinned

  // Relationships
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("PinnedMessages", fields: [pinnedBy], references: [id])

  @@unique([chatId, messageId])
  @@map("pinned_messages")
}

model MessageType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  icon        String?  // Icon for this message type
  color       String?  // Color for this message type
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)

  // Type settings
  allowReactions Boolean @default(true)
  allowReplies   Boolean @default(true)
  allowEditing   Boolean @default(true)
  allowDeleting  Boolean @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("message_types")
}

// ================================
// TASK MANAGEMENT SCHEMA
// ================================

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?

  // Task categorization
  type        String   @default("task") // task, bug, feature, epic, story
  priority    String   @default("medium") // low, medium, high, urgent, critical
  status      String   @default("todo") // todo, in_progress, review, testing, done, cancelled

  // Task organization
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  teamId       String?
  team         Team?       @relation(fields: [teamId], references: [id])

  // Task hierarchy
  parentId     String?
  parent       Task?   @relation("TaskHierarchy", fields: [parentId], references: [id])
  children     Task[]  @relation("TaskHierarchy")

  // Epic/Story relationship
  epicId       String?
  epic         Task?   @relation("EpicStories", fields: [epicId], references: [id])
  stories      Task[]  @relation("EpicStories")

  // Task details
  estimatedHours Float?
  actualHours    Float?
  storyPoints    Int?

  // Dates and deadlines
  startDate      DateTime?
  dueDate        DateTime?
  completedAt    DateTime?

  // Task settings
  isArchived     Boolean @default(false)
  isTemplate     Boolean @default(false)
  isRecurring    Boolean @default(false)
  recurringPattern String? // daily, weekly, monthly, yearly

  // Labels and tags
  labels         String[] // Array of label names
  tags           String[] // Array of tag names

  // External references
  externalId     String? // External system ID
  externalUrl    String? // Link to external system

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Audit fields
  createdBy      String?
  updatedBy      String?

  // Relationships
  assignments    TaskAssignment[]
  comments       TaskComment[]
  attachments    TaskAttachment[]
  timeEntries    TaskTimeEntry[]
  dependencies   TaskDependency[] @relation("TaskDependencies")
  dependents     TaskDependency[] @relation("DependentTasks")
  watchers       TaskWatcher[]

  @@map("tasks")
}

model TaskAssignment {
  id       String   @id @default(cuid())
  taskId   String
  userId   String

  // Assignment details
  role     String   @default("assignee") // assignee, reviewer, approver, watcher
  isActive Boolean  @default(true)

  // Assignment tracking
  assignedAt DateTime @default(now())
  assignedBy String?
  acceptedAt DateTime?

  // Work tracking
  hoursWorked Float?  @default(0)
  progress    Int?    @default(0) // Percentage 0-100

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId, role])
  @@map("task_assignments")
}

model TaskComment {
  id       String   @id @default(cuid())
  taskId   String
  userId   String

  // Comment content
  content  String
  type     String   @default("comment") // comment, note, status_change, assignment_change

  // Comment metadata
  isInternal Boolean @default(false) // Internal team comment
  isEdited   Boolean @default(false)
  isDeleted  Boolean @default(false)

  // Reply support
  replyToId  String?
  replyTo    TaskComment? @relation("CommentReplies", fields: [replyToId], references: [id])
  replies    TaskComment[] @relation("CommentReplies")

  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  editedAt   DateTime?
  deletedAt  DateTime?

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model TaskAttachment {
  id       String   @id @default(cuid())
  taskId   String
  userId   String   // Who uploaded

  // File details
  fileName String
  fileSize Int
  fileType String
  filePath String

  // File metadata
  originalName String
  mimeType     String
  isImage      Boolean @default(false)
  thumbnailPath String?

  // Upload tracking
  uploadedAt   DateTime @default(now())

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_attachments")
}

model TaskTimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String

  // Time tracking
  hours       Float
  description String?
  date        DateTime @default(now())

  // Time entry details
  billable    Boolean  @default(false)
  hourlyRate  Float?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@map("task_time_entries")
}

model TaskDependency {
  id            String @id @default(cuid())
  taskId        String // The task that depends on another
  dependsOnId   String // The task that this task depends on

  // Dependency details
  type          String @default("finish_to_start") // finish_to_start, start_to_start, finish_to_finish, start_to_finish
  lag           Int?   @default(0) // Lag time in hours
  isActive      Boolean @default(true)

  // Timestamps
  createdAt     DateTime @default(now())
  createdBy     String?

  // Relationships
  task          Task @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask Task @relation("DependentTasks", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnId])
  @@map("task_dependencies")
}

model TaskWatcher {
  id       String   @id @default(cuid())
  taskId   String
  userId   String

  // Watcher settings
  isActive Boolean  @default(true)
  watchedAt DateTime @default(now())

  // Notification preferences
  notifyOnUpdate    Boolean @default(true)
  notifyOnComment   Boolean @default(true)
  notifyOnAssignment Boolean @default(true)
  notifyOnStatusChange Boolean @default(true)

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
  @@map("task_watchers")
}

model TaskStatus {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?
  icon        String?

  // Status properties
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  isFinal     Boolean  @default(false) // Cannot change from this status

  // Workflow
  order       Int      @default(0)
  category    String   @default("active") // backlog, active, done, cancelled

  // Permissions
  allowedRoles String[] // Roles that can set this status

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("task_statuses")
}

model TaskType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?
  icon        String?

  // Type properties
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)

  // Default settings for this type
  defaultPriority String? @default("medium")
  defaultStatus   String? @default("todo")

  // Workflow settings
  allowSubtasks   Boolean @default(true)
  allowTimeTracking Boolean @default(true)
  requireEstimate Boolean @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("task_types")
}

model TaskPriority {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?
  icon        String?

  // Priority properties
  level       Int      @unique // 1 = highest, 5 = lowest
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("task_priorities")
}

// ================================
// SYSTEM ROLES & PERMISSIONS SEED DATA
// ================================

// Default System Roles:
// 1. SUPER_ADMIN - Full system access
// 2. ADMIN - Administrative access
// 3. MANAGER - Department/team management
// 4. EMPLOYEE - Basic user access
// 5. GUEST - Limited read-only access

// Default Permissions by Resource:
// Users: create, read, update, delete, manage_roles
// Departments: create, read, update, delete, manage_members
// Teams: create, read, update, delete, manage_members
// Chats: create, read, update, delete, manage_rooms
// Messages: create, read, update, delete, moderate
// Tasks: create, read, update, delete, assign, manage
// Files: create, read, update, delete, download, share
// Reports: create, read, export
// Settings: read, update, manage_system
