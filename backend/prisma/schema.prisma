// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER & ROLE SCHEMA
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  phone     String?
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Role relationships
  userRoles UserRole[]

  // Profile information
  profile UserProfile?

  // Department and Team relationships
  userDepartments UserDepartment[]
  userTeams       UserTeam[]

  // Leadership relationships
  departmentsAsHead Department[] @relation("DepartmentHead")
  teamsAsLead       Team[]       @relation("TeamLead")

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?  // For UI display
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userRoles   UserRole[]
  permissions RolePermission[]

  // Audit fields
  createdBy String?
  updatedBy String?

  @@map("roles")
}

model UserRole {
  id       String @id @default(cuid())
  userId   String
  roleId   String
  isActive Boolean @default(true)
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  resource    String   // e.g., "users", "chats", "tasks"
  action      String   // e.g., "create", "read", "update", "delete"
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  isActive     Boolean @default(true)
  grantedAt    DateTime @default(now())
  grantedBy    String?

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  bio         String?
  timezone    String?   @default("UTC")
  language    String?   @default("en")
  theme       String?   @default("light")
  dateFormat  String?   @default("DD/MM/YYYY")
  timeFormat  String?   @default("24h")
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  desktopNotifications  Boolean @default(true)
  
  // Privacy settings
  profileVisibility     String  @default("public") // public, private, team
  showOnlineStatus      Boolean @default(true)
  showLastSeen          Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// ================================
// DEPARTMENT & TEAM SCHEMA
// ================================

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  code        String?  @unique // Department code (e.g., "IT", "HR", "SALES")
  color       String?  // For UI display

  // Hierarchy support
  parentId    String?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")

  // Contact information
  email       String?
  phone       String?
  address     String?

  // Settings
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(true) // Visible to all users

  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  // Relationships
  teams           Team[]
  userDepartments UserDepartment[]

  // Department head (manager)
  headUserId      String?
  head            User? @relation("DepartmentHead", fields: [headUserId], references: [id])

  @@map("departments")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  displayName String
  description String?
  code        String?  // Team code (e.g., "DEV-FRONTEND", "SALES-NORTH")
  color       String?  // For UI display

  // Department relationship
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  // Team settings
  isActive     Boolean  @default(true)
  isPublic     Boolean  @default(true) // Visible to department members
  maxMembers   Int?     // Maximum team size

  // Team type
  teamType     String   @default("permanent") // permanent, temporary, project

  // Project teams specific fields
  startDate    DateTime?
  endDate      DateTime?

  // Metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  // Relationships
  userTeams    UserTeam[]

  // Team lead
  leadUserId   String?
  lead         User? @relation("TeamLead", fields: [leadUserId], references: [id])

  @@unique([departmentId, name])
  @@map("teams")
}

model UserDepartment {
  id           String   @id @default(cuid())
  userId       String
  departmentId String

  // Role in department
  role         String   @default("member") // member, manager, admin
  isActive     Boolean  @default(true)
  isPrimary    Boolean  @default(false) // Primary department for user

  // Assignment details
  assignedAt   DateTime @default(now())
  assignedBy   String?

  // Relationships
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId])
  @@map("user_departments")
}

model UserTeam {
  id         String   @id @default(cuid())
  userId     String
  teamId     String

  // Role in team
  role       String   @default("member") // member, lead, admin
  isActive   Boolean  @default(true)

  // Assignment details
  assignedAt DateTime @default(now())
  assignedBy String?

  // Relationships
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team       Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("user_teams")
}

// ================================
// SYSTEM ROLES & PERMISSIONS SEED DATA
// ================================

// Default System Roles:
// 1. SUPER_ADMIN - Full system access
// 2. ADMIN - Administrative access
// 3. MANAGER - Department/team management
// 4. EMPLOYEE - Basic user access
// 5. GUEST - Limited read-only access

// Default Permissions by Resource:
// Users: create, read, update, delete, manage_roles
// Departments: create, read, update, delete, manage_members
// Teams: create, read, update, delete, manage_members
// Chats: create, read, update, delete, manage_rooms
// Messages: create, read, update, delete, moderate
// Tasks: create, read, update, delete, assign, manage
// Files: create, read, update, delete, download, share
// Reports: create, read, export
// Settings: read, update, manage_system
